/*
 * main.c
 *
 *  Created on: Apr 15, 2025
 *      Author: Jon Sumner
 *  Based on audio_demo.c by jxciee
 */

#include "alt_types.h"
#include "altera_avalon_timer.h"
#include "altera_avalon_timer_regs.h"
#include "altera_up_avalon_audio.h"
#include "io.h"
#include "math.h"
#include "sys/alt_irq.h"
#include "system.h"
#include <stdbool.h>
#include <stdio.h>

// create standard embedded type definitions
typedef signed char sint8;	   // signed 8 bit values
typedef unsigned char uint8;   // unsigned 8 bit values
typedef signed short sint16;   // signed 16 bit values
typedef unsigned short uint16; // unsigned 16 bit values
typedef signed long sint32;	   // signed 32 bit values
typedef unsigned long uint32;  // unsigned 32 bit values
typedef float real32;		   // 32 bit real values

// Global variables
#define MAX_SAMPLES 0x80000 // 0x80000 max sample data (16 bits each) for SDRAM
#define DELAY_SIZE     1024

volatile bool record_mode      = false;  // true while recording is active
volatile bool playback_ready   = false;  // true when recording is complete, waiting for playback trigger
volatile bool playback_mode    = false;  // true during playback
volatile uint32 record_index   = 0;      // index for recording into SDRAM buffer
volatile uint32 playback_index = 0;      // index for playback from SDRAM buffer

uint16 delay_buffer_left[DELAY_SIZE];
uint16 delay_buffer_right[DELAY_SIZE];
uint32 delay_idx = 0;  // circular index for delay buffer

// set up pointers to peripherals
uint16 *SdramPtr         = (uint16 *)NEW_SDRAM_CONTROLLER_0_BASE;
uint32 *AudioPtr         = (uint32 *)AUDIO_0_BASE;
uint32 *TimerPtr         = (uint32 *)TIMER_0_BASE;
uint32 *PinPtr           = (uint32 *)PIN_BASE;
uint32 *AudioVideoPtr    = (uint32 *)AUDIO_AND_VIDEO_CONFIG_0_BASE;
uint16 *FilterPtr        = (uint16 *)AUDIO_FILTER_0_BASE;  // custom filter component registers
uint32 *KEYPtr           = (uint32 *)KEY_BASE;
volatile uint32 *SWPtr   = (uint32 *)SW_BASE;
uint32 *LEDRPtr          = (uint32 *)LEDR_BASE;

volatile uint32 current_mode = 0;

uint16 process_lowpass(uint16 sample);
uint16 process_highpass(uint16 sample);

uint16 process_lowpass(uint16 sample)
{
    // For low pass filtering, assume writing the sample to FilterPtr+1
    // and reading back the filtered sample from FilterPtr.
    *(FilterPtr + 1) = sample;
    return *FilterPtr;
}

//---------------------------------------------------------------------
// process_highpass: feed sample to high-pass filter and return filtered result
//---------------------------------------------------------------------
uint16 process_highpass(uint16 sample)
{
    // The mechanism for high pass filtering might involve setting a control
    // bit. Here we assume that ORing the sample with 0x8000 selects high pass.
    *(FilterPtr + 1) = sample | 0x8000;
    return *FilterPtr;
}

void timer_isr(void *context)
{
	uint16 right_sample, left_sample;

	// Variables to hold the samples coming out of the filters
	uint16 filtered_right_sample, filtered_left_sample;

	// clear timer interrupt
	*TimerPtr = 0;
	if (TOGGLE == 0)
	{
		TOGGLE = 1;
	}
	else
	{
		TOGGLE = 0;
	}
	*PinPtr = TOGGLE;

	if (SAMPLE_CNT < MAX_SAMPLES)
	{
		left_sample = SdramPtr[SAMPLE_CNT++];

		if (switch_select == 0)
		{
			// Low pass filtering
			*(FilterPtr + 1) = SdramPtr[SAMPLE_CNT];
			filtered_left_sample = *FilterPtr;

			AudioPtr[3] = *FilterPtr; // in stereo, output to both sides
			AudioPtr[2] = *FilterPtr;
		}
		else // this will allow continuous looping of audio. comment this out to only play once
		{
			SAMPLE_CNT = 0;
		}

		return;
	}
}

void sw_isr(void *context)
{
	*(SWPtr + 3) &= ~0x03;
	uint32 sw_val = *SWPtr;

	printf("Low Pass Filter.\n");
	switch_select = 1;

	// 0 offest means that it is writing to the data_in in the VHDL
	// 1 offest means that it is writing to the filter_select in the VHDL
	*(FilterPtr + 1) = 0;
	*LEDRPtr = 0x0F;
	return;
}

int main(void)
{
	printf("ESD-I Lab 10 Program Running.\n");

	// Enable interrupts
	*(SWPtr + 2) |= 0x03;

	// Turn off all LEDs
	*LEDRPtr = 0x00;

	// Register interrupts
	// Use legacy register because the audio core forces the system to legacy
	// alt_irq_register(TIMER_0_IRQ,0,timer_isr);
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, timer_isr, 0, 0);
	alt_ic_isr_register(SW_IRQ_INTERRUPT_CONTROLLER_ID, SW_IRQ, sw_isr, 0, 0);
	// initialize timer interrupt 48Khz
	TimerPtr[4] = 3;

	alt_up_audio_dev *audio_dev;
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;

	// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/audio_0");
	if (audio_dev == NULL)
		printf("Error: could not open audio device \n");
	else
		printf("Opened audio device \n");

	/* read and echo audio data */
	while (1)
	{
		int fifospace = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);
		if (fifospace > 0) /* Check if data is available. */
		{
			/* Read audio buffer. */
			alt_up_audio_read_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);

			/* Write audio buffer. */
			alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
		}
	}
}
