#include <stdint.h>
#include "system.h"  // Provides BUTTONS_BASE, SWITCHES_BASE, HEX0_BASE, etc.

// Same seven-segment patterns as in your assembly code
//  digit : segment bits
//   0 -> 0x40
//   1 -> 0x79
//   2 -> 0x24
//   3 -> 0x30
//   4 -> 0x19
//   5 -> 0x12
//   6 -> 0x02
//   7 -> 0x78
//   8 -> 0x00
//   9 -> 0x18
static const uint8_t seven_seg_table[10] = {
    0x40, /* 0 */
    0x79, /* 1 */
    0x24, /* 2 */
    0x30, /* 3 */
    0x19, /* 4 */
    0x12, /* 5 */
    0x02, /* 6 */
    0x78, /* 7 */
    0x00, /* 8 */
    0x18  /* 9 */
};

int main(void)
{
    // 'count' holds the current digit [0..9] displayed on HEX0
    int count = 0;

    // Initialize HEX0 display to digit 0
    *(volatile uint8_t *)HEX0_BASE = seven_seg_table[count];

    while (1)
    {
        // Read the pushbutton register (1 byte).
        // If you named it differently in system.h (e.g. KEY_PIO_BASE), adjust here.
        uint8_t buttons = *(volatile uint8_t *)BUTTONS_BASE;

        // Check if KEY1 (bit 1) is pressed => (buttons & 0x02) == 0 (active low).
        if ((buttons & 0x02) == 0)
        {
            // Read SW0 (bit 0)
            uint8_t switches = *(volatile uint8_t *)SWITCHES_BASE;
            uint8_t sw0 = switches & 0x01;

            if (sw0)
            {
                // SW0 = 1 => increment with wrap 9 -> 0
                if (count == 9)
                    count = 0;
                else
                    count++;
            }
            else
            {
                // SW0 = 0 => decrement with wrap 0 -> 9
                if (count == 0)
                    count = 9;
                else
                    count--;
            }

            // Update HEX0 with the new 'count' value
            *(volatile uint8_t *)HEX0_BASE = seven_seg_table[count];

            // Wait until KEY1 is released (bit 1 == 1).
            // Pressed => 0, Released => 1
            do {
                buttons = *(volatile uint8_t *)BUTTONS_BASE;
            } while ((buttons & 0x02) == 0);
        }

        // If KEY1 is not pressed, just loop back and keep polling
    }

    return 0; // Not reached
}
